# This is a basic workflow to help you get started with Actions

name: Create Release Branch

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  workflow_dispatch:
    inputs:
      versionName:
        required: true
  push:
    tags:
      - 'v*'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  createrelease:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Test
        run: |
          echo $RELEASE_VERSION
          echo ${{ env.RELEASE_VERSION }}
          echo ${{ github.event.ref }}
          echo ${{ github.event.head }}

      # Runs a single command using the runners shell
#      - name: Update changelog
#        uses: thomaseizinger/keep-a-changelog-new-release@v1
#        with:
#          version:  ${{ env.RELEASE_VERSION }}

      - name: Update changelog
        uses: scottbrenner/generate-changelog-action@master
        id: Changelog
        with:
          REPO: ${{ github.repository }}

      - name: Create release branch
        run: |
          git checkout -b release/${{ env.RELEASE_VERSION }}
          git push origin release/${{ env.RELEASE_VERSION }}
#        run: |
#          git add CHANGELOG.md
#          git add Maps.toc
#          git commit -m "Prepare release ${{ env.RELEASE_VERSION }}"
#          git push origin
#          git push release/${{ env.RELEASE_VERSION }}

#      - name: Commit changelog and Update version in .toc
#        run: git push origin release/${{ env.RELEASE_VERSION }}
#        run: |
#          git add CHANGELOG.md
#          git add Maps.toc
#          git commit -m "Prepare release ${{ env.RELEASE_VERSION }}"
#          git push origin
#          git push release/${{ env.RELEASE_VERSION }}

      - name: Create pull request into master
        uses: peter-evans/create-pull-request@v3
        with:
         token: ${{ secrets.GITHUB_TOKEN }}
         head: release/${{ env.RELEASE_VERSION }}
         branch: master
         title: ${{ env.RELEASE_VERSION }} into master
         reviewers: ${{ github.event.issue.user.login }}
         commiter: GitHub <noreply@github.com>
         author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
         labels: release
         commit-message: |
             Hi!
             This PR was created in response workflow running.
             I've updated the version.

      - name: Create pull request into develop
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          head: release/${{ env.RELEASE_VERSION }}
          branch: develop
          title: ${{ env.RELEASE_VERSION }} into develop
          reviewers: ${{ github.event.issue.user.login }}
          commiter: GitHub <noreply@github.com>
          author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
          labels: release
          commit-message: |
            Hi!
            This PR was created in response workflow running.
            I've updated the version.
      - name: Extract release notes
        id: extract_release_notes
        uses: ffurrer2/extract-release-notes@v1
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: ${{ env.RELEASE_VERSION }}
          body: ${{ steps.Changelog.outputs.changelog }}
#          body: ${{ steps.extract_release_notes.outputs.release_notes }}
          draft: false
          prerelease: ${{ contains('-alpha', env.RELEASE_VERSION) || contains('-beta', env.RELEASE_VERSION) }}
